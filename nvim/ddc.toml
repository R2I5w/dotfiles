[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
local ddc_custom_patch_global = vim.fn["ddc#custom#patch_global"]

local pum_map_select_relative = vim.fn["pum#map#select_relative"]
local pum_map_confirm = vim.fn["pum#map#confirm"]
local pum_map_cancel = vim.fn["pum#map#cancel"]
local pum_visible = vim.fn["pum#visible"]
local pum_entered = vim.fn["pum#entered"]

vim.fn["ddc#custom#load_config"](vim.fn.expand("~/.config/nvim/ddc.ts"))
vim.fn["ddc#enable"]({context_filetype = "treesitter"})

vim.api.nvim_create_autocmd("InsertEnter", {
	callback = function(event)
		vim.keymap.set("i", "<C-p>", function()
			pum_map_select_relative(-1)
		end, {})

		vim.keymap.set("i", "<C-n>", function()
					pum_map_select_relative(1)
				end, {})

                vim.keymap.set("i", "<C-y>", function()
			return '<Cmd>call pum#map#confirm()<CR>'
		end, { expr = true, silent = true })

		vim.keymap.set("i", "<CR>", function()
			return pum_visible() and '<Cmd>call pum#map#confirm()<CR>' or '<CR>'
		end, { expr = true, silent = true })
	end
})
'''

# pum_ui
[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# ddc_source
[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = "Shougo/ddc-source-lsp"
on_source = 'nvim-lspconfig'

[[plugins]]
repo = "uga-rosa/ddc-source-lsp-setup"
on_source = 'nvim-lspconfig'

[[plugins]]
repo = "Shougo/ddc-source-copilot"
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

# ddc_filter
[[plugins]]
repo = 'Shougo/ddc-filter-sorter_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
lua_source = '''
vim.g.vsnip_snippet_dir = vim.fn.expand("~/.cache/dpp/repos/github.com/rafamadriz/friendly-snippets/snippets")
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'ddc.vim'

# copilot
[[plugins]]
repo = "github/copilot.vim"
on_source = 'ddc.vim'
hook_source = '''
let g:copilot_no_maps = v:true
'''

# lsp-doc_preview
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

# signature help
[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
lua_source = '''
vim.fn["signature_help#enable"]()
'''

# skk
[[plugins]]
repo = "vim-skk/skkeleton"
on_source = 'ddc.vim'
hook_source = '''
call skkeleton#config(#{
\   globalDictionaries: [[ "~/.skk/SKK-JISYO.L", "euc-jp" ]],
\   })

call skkeleton#register_keymap('henkan', "<", 'purgeCandidate')
call skkeleton#register_keymap('henkan', "X", '')

call skkeleton#register_keymap('henkan', "<S-q>", 'purgeCandidate')
call skkeleton#register_keymap('henkan', "X", '')

call skkeleton#register_keymap('input', ';', 'henkanPoint')

imap <C-j> <Plug>(skkeleton-enable)
cmap <C-j> <Plug>(skkeleton-enable)
imap <C-l> <Plug>(skkeleton-disable)
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
'''
