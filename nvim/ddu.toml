[[plugins]]
repo = 'Shougo/ddu.vim'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
local keymap = vim.keymap.set
local opts = { noremap = true, silent = true, buffer = true }

vim.fn["ddu#custom#load_config"](vim.fn.expand("~/.config/nvim/ddu.ts"))

vim.api.nvim_create_autocmd("FileType", {
	pattern = "ddu-filer",
	callback = function()
		keymap('n', '<CR>', function()
			local item = vim.fn['ddu#ui#get_item']()
			if item.isTree then
				vim.fn['ddu#ui#do_action']('itemAction', { name = 'narrow' })
			else
				vim.fn['ddu#ui#do_action']('itemAction',
					{ name = 'open' })
			end
		end, opts)

		keymap("n", "q", "<Cmd>call ddu#ui#do_action('quit')<CR>", opts)
		keymap('n', 'h',
			"<Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>",
			opts)
		keymap('n', 'd', "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'delete'})<CR>", opts)
		keymap('n', 'r', "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'rename'})<CR>",
			opts)
		keymap('n', 't', "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'newFile'})<CR>",
			opts)
		keymap('n', 'mk',
			"<Cmd>call ddu#ui#do_action('itemAction', {'name': 'newDirectory'})<CR>", opts)
	end,
})

vim.api.nvim_create_autocmd("FileType", {
	pattern = "ddu-ff",
	callback = function()
		keymap('n', '<CR>', function()
			local item = vim.fn['ddu#ui#get_item']()
			if item.isTree then
				vim.fn['ddu#ui#do_action']('itemAction', { name = 'narrow' })
			else
				vim.fn['ddu#ui#do_action']('itemAction',
					{ name = 'open' })
			end
		end, opts)


		keymap("n", "q", "<Cmd>call ddu#ui#do_action('quit')<CR>", opts)
		keymap('n', '<Cr>', "<Cmd>call ddu#ui#do_action('itemAction')<CR>)", opts)
		keymap('n', 'i', "<Cmd>call ddu#ui#do_action('openFilterWindow')<CR>", opts)
		keymap('n', 'h',
			"<Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>",
			opts)
		keymap('n', 'd', "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'delete'})<CR>", opts)
		keymap('n', 'r', "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'rename'})<CR>",
			opts)
		keymap('n', 't', "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'newFile'})<CR>",
			opts)
		keymap('n', 'mk',
			"<Cmd>call ddu#ui#do_action('itemAction', {'name': 'newDirectory'})<CR>", opts)
	end,
})

vim.api.nvim_create_autocmd("CursorMoved", {
  pattern = "*",
  callback = function()
    local filetype = vim.bo.filetype
    if filetype == "ddu-ff" then
      vim.fn["ddu#ui#do_action"]("preview")
    end
  end,
})
'''

# ddu_ui
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = ['ddu.vim']

# ddu_source
[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = ['ddu.vim']

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kuuote/ddu-source-git_status'
on_source = ['ddu.vim']

# ddu_filter
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = ['ddu.vim']

# mr用に追加
# [[plugins]]
# repo = 'Shougo/ddu-filter-matcher_relative'
# on_source = ['ddu.vim']

# ddu_kind
[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = ['ddu.vim']

# ff_devicon
[[plugins]]
repo = 'uga-rosa/ddu-filter-converter_devicon'
on_source = ['ddu.vim']

# [[plugins]]
# repo = 'Shougo/ddu-column-filename'
# on_source = ['ddu.vim']

# ddu_column
[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = ['ddu.vim']

# mru
[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = ['ddu.vim']
