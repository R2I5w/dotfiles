[[plugins]]
repo = "ellisonleao/gruvbox.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require("gruvbox").setup({
  contrast = "soft",
  transparent_mode = true,
  palette_overrides = {
    bright_green = "#98971a",
  },
})
"""

# [[plugins]]
# repo = "catppuccin/nvim"
# on_event = ['BufRead', 'CursorHold']
# lua_source = """
# require("catppuccin").setup({})
# vim.cmd.colorscheme "catppuccin"
# """

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
lua_source = """
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true,
  },
  ensure_installed = 'all'
}
"""

[[plugins]]
repo = "numToStr/Comment.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require('Comment').setup()
"""

[[plugins]]
repo = "shortcuts/no-neck-pain.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require('no-neck-pain').setup()
"""

[[plugins]]
repo = "Shougo/deol.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require("hooks/deol")
'''

[[plugins]]
repo = "vim-jp/vimdoc-ja"
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = "skanehira/translate.vim"
on_event = ['BufRead', 'CursorHold']
hook_source = '''
let mapleader = " "
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_popup_window = 1
nmap gr <Plug>(Translate)
vmap <leader>t <Plug>(VTranslate)
'''

[[plugins]]
repo = "machakann/vim-sandwich"
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_source = ['sg.nvim']

[[plugins]]
repo = "yuratomo/w3m.vim"
on_event = ['BufRead', 'CursorHold']
hook_source = '''
let g:w3m#disable_default_keymap = 1
'''

[[plugins]]
repo = "simeji/winresizer"
on_event = ['BufRead', 'CursorHold']
hook_source = '''
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = "folke/noice.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require("noice").setup({
  views = {
    cmdline_popup = {
      position = {
        row = "5%",
        col = "50%",
      },
      size = {
        width = "60%",
        height = "auto",
      },
      border = {
        style = "rounded",
        padding = { 0, 1 },
      },
    },
  },
})
"""

[[plugins]]
repo = "MunifTanjim/nui.nvim"
on_source = ['noice.nvim']

[[plugins]]
repo = "rcarriga/nvim-notify"
on_source = ['noice.nvim']
lua_source = """
require("notify").setup({
  background_colour = "#000000",
  timeout = 2000,
})
"""

[[plugins]]
repo = "hrsh7th/nvim-insx"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require("hooks/insx")
"""

[[plugins]]
repo = 'hrsh7th/nvim-automa'
on_event = ['BufRead', 'CursorHold']
lua_source = """
local automa = require('automa')
automa.setup({
  mapping = {
    ['.'] = {
      queries = {
        -- wide-range dot-repeat definition.
        automa.query_v1({ '!n(h,j,k,l)+' }),
      }
    },
  }
})
"""

[[plugins]]
repo = "lambdalisue/vim-gin"
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = "sourcegraph/sg.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require('sg').setup({
})
"""

[[plugins]]
repo = "github/copilot.vim"
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
on_source = ['copilot.vim']
lua_source = '''
require("CopilotChat").setup {
  debug = true, -- Enable debugging
  prompts = {
        Explain = {
            prompt = "/COPILOT_EXPLAIN コードを日本語で説明してください",
            mapping = '<leader>ce',
            description = "コードの説明をお願いする",
        },
        Review = {
            prompt = '/COPILOT_REVIEW コードを日本語でレビューしてください。',
            mapping = '<leader>cr',
            description = "コードのレビューをお願いする",
        },
        Fix = {
            prompt = "/COPILOT_FIX このコードには問題があります。バグを修正したコードを表示してください。説明は日本語でお願いします。",
            mapping = '<leader>cf',
            description = "コードの修正をお願いする",
        },
        Optimize = {
            prompt = "/COPILOT_REFACTOR 選択したコードを最適化し、パフォーマンスと可読性を向上させてください。説明は日本語でお願いします。",
            mapping = '<leader>co',
            description = "コードの最適化をお願いする",
        },
        Docs = {
            prompt = "/COPILOT_GENERATE 選択したコードに関するドキュメントコメントを日本語で生成してください。",
            mapping = '<leader>cd',
            description = "コードのドキュメント作成をお願いする",
        },
        Tests = {
            prompt = "/COPILOT_TESTS 選択したコードの詳細なユニットテストを書いてください。説明は日本語でお願いします。",
            mapping = '<leader>ct',
            description = "テストコード作成をお願いする",
        },
        FixDiagnostic = {
            prompt = 'コードの診断結果に従って問題を修正してください。修正内容の説明は日本語でお願いします。',
            mapping = '<leader>cd',
            description = "コードの修正をお願いする",
            selection = require('CopilotChat.select').diagnostics,
        },
        Commit = {
            prompt =
            '実装差分に対するコミットメッセージを日本語で記述してください。',
            mapping = '<leader>cc',
            description = "コミットメッセージの作成をお願いする",
            selection = require('CopilotChat.select').gitdiff,
        },
        CommitStaged = {
            prompt =
            'ステージ済みの変更に対するコミットメッセージを日本語で記述してください。',
            mapping = '<leader>cs',
            description = "ステージ済みのコミットメッセージの作成をお願いする",
            selection = function(source)
                return require('CopilotChat.select').gitdiff(source, true)
            end,
        },
    },
}

vim.g.mapleader = " "
vim.api.nvim_set_keymap('n', '<leader>c', ':CopilotChat<CR>', {noremap = true, silent = true})

-- バッファの内容全体を使って Copilot とチャットする
function CopilotChatBuffer()
  local input = vim.fn.input("Quick Chat: ")
  if input ~= "" then
    require("CopilotChat").ask(input, { selection = require("CopilotChat.select").buffer })
  end
end

-- <leader>ccq (Copilot Chat Quick) で Copilot とチャットする
vim.api.nvim_set_keymap("n", "<leader>cb", "<cmd>lua CopilotChatBuffer()<cr>", { noremap = true, silent = true })
'''
