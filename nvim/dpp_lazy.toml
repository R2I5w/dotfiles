# [[plugins]]
# repo = "craftzdog/solarized-osaka.nvim"
# on_event = ['VimEnter']
# lua_source = '''
# require('solarized-osaka').setup({ })
# '''
[[plugins]]
repo = "ellisonleao/gruvbox.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require("gruvbox").setup({
  contrast = "soft",
  transparent_mode = true,
  palette_overrides = {
    bright_green = "#98971a",
  },
})
"""

[[plugins]]
repo = "miyakogi/seiya.vim"
# on_event = ['BufRead', 'CursorHold']
on_event = ["ColorSchemePre", 'BufRead', 'CursorHold']
# on_cmd = ["SeiyaEnable"]
lua_source = """
vim.cmd("let g:seiya_target_groups = has('nvim') ? ['guibg'] : ['ctermbhhg']")
-- vim.g.seiya_auto_enable = 1
-- vim.cmd("SeiyaEnable")
"""

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
lua_source = """
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true,
  },
  ensure_installed = 'all'
}
"""

[[plugins]]
repo = "numToStr/Comment.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require('Comment').setup()
"""

[[plugins]]
repo = "nvim-lualine/lualine.nvim"
on_event = ['VimEnter']
lua_source = """
require('lualine').setup()
"""

[[plugins]]
repo = "shortcuts/no-neck-pain.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = """
require('no-neck-pain').setup()
"""

[[plugins]]
repo = "Shougo/deol.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require("config/deol")
'''

[[plugins]]
repo = "akinsho/bufferline.nvim"
on_event = ['BufRead', 'CursorHold']
lua_source = '''
vim.opt.termguicolors = true
require("bufferline").setup({
options = {
buffer_close_icon = false,
close_icon = false
}
})
'''

[[plugins]]
repo = "vim-jp/vimdoc-ja"
on_event = ['BufRead', 'CursorHold']


[[plugins]]
repo = "ryicoh/deepl.vim"
on_event = ['BufRead', 'CursorHold']
hook_source = '''
let g:deepl#endpoint = "https://api-free.deepl.com/v2/translate"

let g:deepl#auth_key = "8321b217-9289-4510-934e-ca5abb14fa57:fx"

vmap t<C-j> <Cmd>call deepl#v("JA")<CR>
vmap t<C-e> <Cmd>call deepl#v("EN")<CR>
'''

[[plugins]]
repo = "skanehira/translate.vim"
on_event = ['BufRead', 'CursorHold']
hook_source = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_popup_window = 1
nmap gr <Plug>(Translate)
vmap t <Plug>(VTranslate)
'''

[[plugins]]
repo = "machakann/vim-sandwich"
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = "nvim-zh/colorful-winsep.nvim"
on_event = ['WinNew', 'WinEnter']
lua_source = '''
require('colorful-winsep').setup {
  symbols = { '─', '│', '╭', '╮', '╰', '╯' },
}
'''

[[plugins]]
repo = 'mfussenegger/nvim-dap'
on_event = ['BufRead', 'CursorHold']

[[plugins]]
repo = 'nvim-neotest/nvim-nio'
on_source = ['nvim-dap']

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
on_source = ['nvim-dap']
lua_source = '''
require('dapui').setup({
  layouts = {
    {
      elements = {
        { id = "watches", size = 0.20 },
        { id = "stacks", size = 0.20 },
        { id = "breakpoints", size = 0.20 },
        { id = "scopes", size = 0.40 }
      },
      position = "right",
      size = 40
    },
    {
      elements = {
        { id = "console", size = 0.5 },
        { id = "repl", size = 0.5 }
      },
      position = "bottom",
      size = 10
    }
  },
})
-- 自動でウィンドウを開閉
local dap, dapui = require("dap"), require("dapui")
dap.listeners.before.attach.dapui_config = function()
  dapui.open()
end
dap.listeners.before.launch.dapui_config = function()
  dapui.open()
end
dap.listeners.before.event_terminated.dapui_config = function()
  dapui.close()
end
dap.listeners.before.event_exited.dapui_config = function()
  dapui.close()
end
'''

[[plugins]]
repo = 'theHamsta/nvim-dap-virtual-text'
on_source = ['nvim-dap']
lua_source = '''
require('nvim-dap-virtual-text').setup()
'''

[[plugins]]
repo = 'mfussenegger/nvim-dap-python'
on_event = ['BufRead', 'CursorHold']
# on_source = ['nvim-dap']
lua_source = '''
require('dap-python').setup('python')
-- コンテナ上のPythonをデバッグする設定
table.insert(require('dap').configurations.python, {
  type = 'python',
  request = 'attach',
  name = 'Remote Python Debugger',
  port = 5678,
  host = "127.0.0.1",
  mode = "remote",
  cwd = vim.fn.getcwd(),
  -- ローカルとコンテナのパスをマッピング
  pathMappings = {
    {
      localRoot = function() -- ローカルのPythonコードを格納するディレクトリ
        return vim.fn.input("Local directory > ", vim.fn.getcwd(), "file")
      end,
      remoteRoot = function() -- コンテナ内のPythonコードを格納するディレクトリ
        return vim.fn.input("Container directory > ", "/code/app", "file")
      end,
    },
  },
})

-- :help dap-mappings の例に従ってキーマッピングを設定
vim.g.mapleader = " "
vim.keymap.set('n', '<leader>d', function() require('dap').continue() end)
vim.keymap.set('n', '<F10>', function() require('dap').step_over() end)
vim.keymap.set('n', '<F11>', function() require('dap').step_into() end)
vim.keymap.set('n', '<F12>', function() require('dap').step_out() end)
vim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)
vim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint() end)
vim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
vim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)
vim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)
vim.keymap.set({'n', 'v'}, '<Leader>dh', function()
  require('dap.ui.widgets').hover()
end)
vim.keymap.set({'n', 'v'}, '<Leader>dp', function()
  require('dap.ui.widgets').preview()
end)
vim.keymap.set('n', '<Leader>df', function()
  local widgets = require('dap.ui.widgets')
  widgets.centered_float(widgets.frames)
end)
vim.keymap.set('n', '<Leader>ds', function()
  local widgets = require('dap.ui.widgets')
  widgets.centered_float(widgets.scopes)
end)
'''
